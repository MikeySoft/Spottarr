// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spottarr.Data;

#nullable disable

namespace Spottarr.Data.Migrations
{
    [DbContext(typeof(SpottarrDbContext))]
    [Migration("20241013140438_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1");

            modelBuilder.Entity("Spottarr.Data.Entities.Spot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Bytes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<long>("MessageNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("SpottedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Spotter")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Spots");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Spottarr.Data.Entities.ApplicationSpot", b =>
                {
                    b.HasBaseType("Spottarr.Data.Entities.Spot");

                    b.PrimitiveCollection<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Platforms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Spots", t =>
                        {
                            t.Property("Genres")
                                .HasColumnName("ApplicationSpot_Genres");

                            t.Property("Platforms")
                                .HasColumnName("ApplicationSpot_Platforms");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Spottarr.Data.Entities.AudioSpot", b =>
                {
                    b.HasBaseType("Spottarr.Data.Entities.Spot");

                    b.PrimitiveCollection<string>("Bitrates")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Formats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Types")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Spots", t =>
                        {
                            t.Property("Formats")
                                .HasColumnName("AudioSpot_Formats");

                            t.Property("Genres")
                                .HasColumnName("AudioSpot_Genres");

                            t.Property("Sources")
                                .HasColumnName("AudioSpot_Sources");

                            t.Property("Types")
                                .HasColumnName("AudioSpot_Types");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Spottarr.Data.Entities.GameSpot", b =>
                {
                    b.HasBaseType("Spottarr.Data.Entities.Spot");

                    b.PrimitiveCollection<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Platforms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Spots", t =>
                        {
                            t.Property("Genres")
                                .HasColumnName("GameSpot_Genres");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Spottarr.Data.Entities.ImageSpot", b =>
                {
                    b.HasBaseType("Spottarr.Data.Entities.Spot");

                    b.PrimitiveCollection<string>("Formats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Types")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(0);
                });
#pragma warning restore 612, 618
        }
    }
}
